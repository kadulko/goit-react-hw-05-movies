{"version":3,"file":"static/js/974.392546c9.chunk.js","mappings":"kOAsCA,UAjCA,SAAiBA,GACf,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMC,GAAN,wFACUC,EAAAA,EAAAA,IAAWR,GADrB,QACbS,EADa,QAEAC,QACjBN,GAAW,OAAIK,IAHE,2CAAH,sDAMlBH,EAAaN,EACd,GAAE,CAACA,KAGF,iCACIG,IAAW,gEACZA,IACC,wBACGA,EAAQQ,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOL,GADC,QAU5B,C,+LChCKQ,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAU,sBAAuB,CACtDC,OAAQ,CACNC,QAASJ,KAJV,cAEGK,EAFH,yBAOIA,EAASC,KAAKC,SAPlB,gCASHC,QAAQC,MAAR,MATG,gFAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gGAEoBT,EAAAA,EAAAA,IAAU,gBAAiB,CAChDC,OAAQ,CACNQ,MAAOA,EACPP,QAASJ,KALV,cAEGK,EAFH,yBAQIA,EAASC,KAAKC,SARlB,gCAUHC,QAAQC,MAAR,MAVG,gFAcA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BpB,GAA5B,gGAEoBU,EAAAA,EAAAA,IAAA,iBAAoBV,GAAM,CAC/CW,OAAQ,CACNC,QAASJ,KAJV,cAEGK,EAFH,yBAOIA,EAASC,MAPb,gCASHE,QAAQC,MAAR,MATG,gFAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA0BrB,GAA1B,gGAEoBU,EAAAA,EAAAA,IAAA,iBAAoBV,EAApB,YAAkC,CACvDW,OAAQ,CACNC,QAASJ,KAJV,cAEGK,EAFH,yBAOIA,EAASC,KAAKQ,MAPlB,gCASHN,QAAQC,MAAR,MATG,gFAaA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BD,GAA1B,gGAEoBU,EAAAA,EAAAA,IAAA,iBAAoBV,EAApB,YAAkC,CACvDW,OAAQ,CACNC,QAASJ,KAJV,cAEGK,EAFH,yBAOIA,EAASC,KAAKC,SAPlB,gCASHC,QAAQC,MAAR,MATG,gFAvDPP,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/Rewiews/Reviews.jsx","services/api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/api';\n// import PropTypes from 'prop-types'\n\nfunction Reviews(props) {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState();\n\n  useEffect(() => {\n    const fetchReviews = async id => {\n      const fetchedReviews = await getReviews(movieId);\n      if (fetchedReviews.length) {\n        setReviews([...fetchedReviews]);\n      }\n    };\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {!reviews && <h5>There are no reviews for this movie</h5>}\n      {reviews && (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h5>Author: {review.author}</h5>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nReviews.propTypes = {};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '8f1902936e413b4882515a6f0fcd6c97';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function getTrending() {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovies(query) {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        query: query,\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getCredits(id) {\n  try {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["props","movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","id","getReviews","fetchedReviews","length","map","review","author","content","API_KEY","getTrending","axios","params","api_key","response","data","results","console","error","getMovies","query","getMovieById","getCredits","cast"],"sourceRoot":""}